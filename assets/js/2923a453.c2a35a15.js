"use strict";(self.webpackChunktreeppl_github_io=self.webpackChunktreeppl_github_io||[]).push([[948],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||s[m]||a;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5603:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={id:"phylo"},c="Phylogenetic Models",p={unversionedId:"phylo",id:"phylo",title:"Phylogenetic Models",description:"A library of phylogenetic models has been created as part of TreePPL.  These models can be found under models/phylo.",source:"@site/docs/3-phylo.md",sourceDirName:".",slug:"/phylo",permalink:"/docs/phylo",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"phylo"},sidebar:"tutorialSidebar",previous:{title:"TreePPL Cheat Sheet",permalink:"/docs/user"},next:{title:"Functional programming languages",permalink:"/docs/Glossary/functional"}},u=[{value:"Constant rate birth-death",id:"constant-rate-birth-death",children:[],level:2},{value:"ClaDS",id:"clads",children:[],level:2}],s={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"phylogenetic-models"},"Phylogenetic Models"),(0,a.kt)("p",null,"A library of phylogenetic models has been created as part of TreePPL.  These models can be found under ",(0,a.kt)("inlineCode",{parentName:"p"},"models/phylo"),"."),(0,a.kt)("h2",{id:"constant-rate-birth-death"},"Constant rate birth-death"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"models/phylo/crbd"))),(0,a.kt)("p",null,"The version ",(0,a.kt)("inlineCode",{parentName:"p"},"crbd_quick.tppl")," uses a technique called Jan's walk to not waste information at the end of the branch.  A tree (data) is provided.  To compile do"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tpplc models/phylo/crbd/crbd_quick.tppl models/phylo/crbd/alcedinidae.mc -m smc-bpf out.mc && mi compile out.mc\n")),(0,a.kt)("p",null,"Now you can use the executable ",(0,a.kt)("inlineCode",{parentName:"p"},"out [number of particles] [number of sweeps]")," to estimate the marginal likelihood of the model and get samples from the posterior of the lineage-splitting rate \u03bb.  Here, it is very crucial that you use an advanced inference method such as SMC-BPF or SMC-APF as the default importance sampling will not result in a good sample."),(0,a.kt)("p",null,"Feel free to experiment with the model, change the input, the priors, or the output."),(0,a.kt)("h2",{id:"clads"},"ClaDS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"models/phylo/clads"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"clads.tppl")," in the model directory is a simple version of ClaDS that returns the speciation rate \u03bb; however, it does not return the branch-specific rates.  Feel free to extend it."))}d.isMDXComponent=!0}}]);